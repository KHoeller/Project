// Ãœberreste von den ersten Versuchen mit tsx und html (vor React) 

import Map from "/node_modules/.vite/deps/ol_Map__js.js?v=0f6ba595";
import OSM from "/node_modules/.vite/deps/ol_source_OSM__js.js?v=0f6ba595";
import TileLayer from "/node_modules/.vite/deps/ol_layer_Tile__js.js?v=0f6ba595";
import TileWMS from "/node_modules/.vite/deps/ol_source_TileWMS__js.js?v=0f6ba595";
import View from "/node_modules/.vite/deps/ol_View__js.js?v=0f6ba595";
import MousePosition from "/node_modules/.vite/deps/ol_control_MousePosition.js?v=0f6ba595";
import { createStringXY } from "/node_modules/.vite/deps/ol_coordinate.js?v=0f6ba595";
const layers = [
  new TileLayer({
    source: new OSM()
  }),
  new TileLayer({
    source: new TileWMS({
      url: "http://localhost:8080/geoserver/Umwelt-Gesundheit/wms",
      params: { "LAYERS": "R_PM10_2021", "TILED": true },
      serverType: "geoserver",
      transition: 0
    })
  }),
  new TileLayer({
    source: new TileWMS({
      url: "http://localhost:8080/geoserver/Umwelt-Gesundheit/wms",
      params: { "LAYERS": "V_O3_2021", "TILED": true },
      serverType: "geoserver",
      transition: 0
    })
  })
];
const map = new Map({
  layers,
  target: "map",
  view: new View({
    center: [1141371, 6735169],
    zoom: 4
  })
});
const targetElement = document.getElementById("mouse-position");
if (targetElement !== null) {
  const mousePositionControl = new MousePosition({
    coordinateFormat: createStringXY(7),
    projection: "EPSG:3857",
    target: targetElement
  });
  map.addControl(mousePositionControl);
}
map.on("singleclick", function(evt) {
  //console.log(evt.coordinate);
  const infoElement = document.getElementById("info");
  if (infoElement) {
    infoElement.innerHTML = "";
    const viewResolution = evt.map.getView().getResolution() ?? 0;
    const source = layers[1]?.getSource();
    if (source instanceof TileWMS) {
      const url = source.getFeatureInfoUrl(
        evt.coordinate,
        viewResolution,
        "EPSG:3857",
        { "INFO_FORMAT": "application/json" }
      );
     // console.log(url);
      if (url) {
        fetch(url).then((response) => response.json()).then((responseObject) => {
          //console.log(responseObject);
        });
      }
    }
  }
  target:
    infoElement;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2tob2VsbGVyL0Rva3VtZW50ZS9PcGVuTGF5ZXJzL21haW5fdGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBNYXAgZnJvbSAnb2wvTWFwLmpzJzsgICAgICAgICAgICAvLyBhIGNvcmUgY29tcG9uZW50IG9mIE9wZW5MYXllcnMgbW9kdWxlIFxuaW1wb3J0IE9TTSBmcm9tICdvbC9zb3VyY2UvT1NNLmpzJztcbmltcG9ydCBUaWxlTGF5ZXIgZnJvbSAnb2wvbGF5ZXIvVGlsZS5qcyc7XG5pbXBvcnQgVGlsZVdNUyBmcm9tICdvbC9zb3VyY2UvVGlsZVdNUy5qcyc7XG5pbXBvcnQgVmlldyBmcm9tICdvbC9WaWV3LmpzJztcbmltcG9ydCBUaWxlU291cmNlIGZyb20gJ29sL3NvdXJjZS9UaWxlLmpzJztcblxuaW1wb3J0IE1vdXNlUG9zaXRpb24gZnJvbSAnb2wvY29udHJvbC9Nb3VzZVBvc2l0aW9uJzsgLy8gZsO8ciBLb29yZGluYXRlbiBtaXRoaWxmZSBkZXIgTWF1c3Bvc2l0aW9uIFxuaW1wb3J0IHtjcmVhdGVTdHJpbmdYWX0gZnJvbSAnb2wvY29vcmRpbmF0ZSc7ICAgLy8gSW5mbyB1bSBzdHJpbmcgbWl0IGRlbiBqZXdlaWxpZ2VuIEtvb3JkaW5hdGVuIGVyc3RlbGxlbiBcblxuXG5cbi8vIExheWVybmFtZW4gYXVzIEpTT04tRGF0ZWkgaW1wb3J0aWVyZW4gdW5kIGluIEFycmF5IHNwZWljaGVyblxuLy8gaW1wb3J0IGpzb25kYXRhIGZyb20gJy4vY29uZmlnLmpzb24nO1xuLy8gICAgIC8vIGNvbnNvbGUubG9nKGpzb25kYXRhKTsgLy8gZWlubGFkZW4gaGF0IGZ1bmt0aW9uZXJ0IFxuXG4vLyBsZXQganNvbkxheWVybmFtZXMgPSBqc29uZGF0YTtcbi8vIGNvbnNvbGUubG9nKGpzb25MYXllcm5hbWVzKTsgLy8gYW5zY2hhdWVuIGRlcyBMYXllcnMgXG5cbi8vIGxldCBMYXllckFycmF5ID0gT2JqZWN0LnZhbHVlcyhqc29uTGF5ZXJuYW1lcy5sYXllcnMpOyAvLyBhcnJheVxuLy8gICAgIC8vIGNvbnNvbGUubG9nKExheWVyQXJyYXkpO1xuXG4vLyBsZXQgbGF5ZXJOYW1lczogc3RyaW5nW10gPSBbXTsgLy8gQXJyYXkgZsO8ciBkaWUgRXJnZWJuaXNzZSAoSW5oYWx0ZSBhbHMgc3RyaW5nKVxuXG4vLyBmb3IgKGxldCBpID0gMDsgaSA8IExheWVyQXJyYXkubGVuZ3RoOyBpKyspIHsgLy8gZsO8ciBqZWRlbiBFaW50cmFnIGRlcyBBcnJheXMgd2lyZCBkZXIgTmFtZSBnZWZpbHRlcnRcbi8vICAgbGV0IGxheWVybmFtZSA9IExheWVyQXJyYXlbaV0ubmFtZTtcbi8vICAgbGF5ZXJOYW1lcy5wdXNoKGxheWVybmFtZSk7ICAgLy8gYW5zY2hsaWXDn2VuZCB3aXJkIGRlciBOYW1lIGFscyBzdHJpbmcgaW0gQXJyYXkgbGF5ZXJOYW1lcyBnZXNwZWljaGVydCBcbi8vIH1cbi8vIGNvbnNvbGUubG9nKGxheWVyTmFtZXMpOyAgICAvLyBBcnJheSB3dXJkZSBlcmZvbGdyZWljaCBlcnN0ZWxsdCBcblxuXG4vLyAvLyBMYXllciBmw7xyIGRpZSBXZWJhcHBsaWthdGlvbiBlcnN0ZWxsZW4gdW5kIGxlc2JhciBzcGVpY2hlcm4gXG4vLyBsZXQgbGF5ZXJzOiBUaWxlTGF5ZXI8VGlsZVNvdXJjZT5bXSA9IFtdOyAgICAgICAvLyBBcnJheSBsYXllcnMgZsO8ciBkaWUgVGlsZUxheWVyIFxuXG4vLyBsYXllcnMucHVzaChuZXcgVGlsZUxheWVyKHtcbi8vICAgc291cmNlOiBuZXcgT1NNKCksICAgICAgICAgICAgICAgICAgICAvLyBkZXIgZXJzdGUgTGF5ZXIgbGllZ3QgZ2FueiB6dSB1bnRlcnN0OyBoaWVyOiBPU01cbi8vIH0pKTtcblxuLy8gZm9yIChsZXQgbmFtZSBvZiBsYXllck5hbWVzKXsgICAgIC8vIFNjaGxlaWZlIGR1cmNoIGFsbGUgTGF5ZXJuYW1lbiwgZGFyYXVzIExheWVyIGVyc3RlbGxlbiB1bmQgenUgbGF5ZXJzIGhpbnp1ZsO8Z2VuIFxuLy8gICBsZXQgbmV3TGF5ZXIgPSBuZXcgVGlsZUxheWVyKHtcbi8vICAgICBzb3VyY2U6IG5ldyBUaWxlV01TKHtcbi8vICAgICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjgwODAvZ2Vvc2VydmVyL1Vtd2VsdC1HZXN1bmRoZWl0L3dtcycsICBcbi8vICAgICBwYXJhbXM6IHsnTEFZRVJTJzogbmFtZSwgJ1RJTEVEJzogdHJ1ZX0sXG4vLyAgICAgc2VydmVyVHlwZTogJ2dlb3NlcnZlcicsXG4vLyAgICAgLy8gdHJhbnNpdGlvbjogMCxcbi8vICAgICB9KSxcbi8vICAgfSlcbi8vICAgbGF5ZXJzLnB1c2gobmV3TGF5ZXIpXG4vLyB9XG5cblxuLy8gbnVyIHp1bSBUZXN0ZW46IFxuY29uc3QgbGF5ZXJzID0gIFtcbiAgbmV3IFRpbGVMYXllcih7XG4gICAgc291cmNlOiBuZXcgT1NNKCksICAgIC8vIGJhc2ljIG1hcCBcbiAgfSksXG5cbiAgbmV3IFRpbGVMYXllcih7XG4gICAgLy9leHRlbnQ6IFs2NTAwMDAsIDU5MDAwMCwgMTc3NDQ0NywgNzQ3MzI4Ml0sIC8vIGFucGFzc2VuIGVudHNwcmVjaGVuZCBMYXllciAhISEhXG4gICAgc291cmNlOiBuZXcgVGlsZVdNUyh7XG4gICAgICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjgwODAvZ2Vvc2VydmVyL1Vtd2VsdC1HZXN1bmRoZWl0L3dtcycsICAvLyB1cmwgenVtIGdlb3NlcnZlciAgXG5cbiAgICAgIHBhcmFtczogeydMQVlFUlMnOiAnUl9QTTEwXzIwMjEnLCAnVElMRUQnOiB0cnVlfSxcbiAgICAgIHNlcnZlclR5cGU6ICdnZW9zZXJ2ZXInLFxuICAgICAgXG4gICAgICB0cmFuc2l0aW9uOiAwLCAvLyBDb3VudHJpZXMgaGF2ZSB0cmFuc3BhcmVuY3ksIHNvIGRvIG5vdCBmYWRlIHRpbGVzOlxuICAgIH0pLFxuICB9KSxcbiAgXG4gIG5ldyBUaWxlTGF5ZXIoe1xuICAgIC8vZXh0ZW50OiBbNjUwMDAwLCA1OTAwMDAsIDE3NzQ0NDcsIDc0NzMyODJdLCAvLyBhbnBhc3NlbiBlbnRzcHJlY2hlbmQgTGF5ZXIgISEhIVxuICAgIHNvdXJjZTogbmV3IFRpbGVXTVMoe1xuICAgICAgdXJsOiAnaHR0cDovL2xvY2FsaG9zdDo4MDgwL2dlb3NlcnZlci9VbXdlbHQtR2VzdW5kaGVpdC93bXMnLCAgLy8gdXJsIHp1bSBnZW9zZXJ2ZXIgIFxuXG4gICAgICBwYXJhbXM6IHsnTEFZRVJTJzogJ1ZfTzNfMjAyMScsICdUSUxFRCc6IHRydWV9LFxuICAgICAgc2VydmVyVHlwZTogJ2dlb3NlcnZlcicsXG4gICAgICBcbiAgICAgIHRyYW5zaXRpb246IDAsIC8vIENvdW50cmllcyBoYXZlIHRyYW5zcGFyZW5jeSwgc28gZG8gbm90IGZhZGUgdGlsZXM6XG4gICAgfSksXG4gIH0pLFxuXTtcbi8vIEVOREVcblxuXG4vLyBCYXNpcyBNYXAgdW5kIHZpZXcgXG5jb25zdCBtYXAgPSBuZXcgTWFwKHsgICAgICAgLy8gZXJzdGVsbGVuIGVpbmVzIG5ldWVuIEthcnRlbm9iamVrdHMgbWl0IE9wZW5MYXllcnNcbiAgbGF5ZXJzOiBsYXllcnMsICAgICAgICAgICAvLyBnaWJ0IGFuLCB3YXMgZGVyIEthcnRlIGhpbnp1Z2Vmw7xndCB3ZXJkZW4gc29sbDsgTGlzdGUgbWl0IExheWVyLU9iamVrdGVuXG4gIHRhcmdldDogJ21hcCcsXG4gIHZpZXc6IG5ldyBWaWV3KHsgICAgICAgICAgLy8gS2FydGVuYW56ZWlnZTogWmVudHJ1bSBkZXIgS2FydGUsIHByb2plY3Rpb24gZGVmYXVsdDogRVBTRzozODU3XG4gICAgY2VudGVyOiBbMTE0MTM3MSwgNjczNTE2OV0sIFxuICAgIHpvb206IDQsICAgICAgICBcbiAgfSksXG59KTtcblxuLy8gQW56ZWlnZSB2b24gS29vcmRpbmF0ZW4gKExva2FsaXTDpHQgZGVyIEFuemVpZ2UgYXVmIGRlciBXZWJhcHBsaWthdGlvbiB2ZXLDpG5kZXJuKVxuY29uc3QgdGFyZ2V0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3VzZS1wb3NpdGlvbicpO1xuaWYgKHRhcmdldEVsZW1lbnQgIT09IG51bGwpIHtcbiAgY29uc3QgbW91c2VQb3NpdGlvbkNvbnRyb2wgPSBuZXcgTW91c2VQb3NpdGlvbih7XG4gICAgY29vcmRpbmF0ZUZvcm1hdDogY3JlYXRlU3RyaW5nWFkoNyksIC8vIDcgTmFjaGtvbW1hc3RlbGxlbiBcbiAgICBwcm9qZWN0aW9uOiAnRVBTRzozODU3JyxcbiAgICB0YXJnZXQ6IHRhcmdldEVsZW1lbnQsXG4gIH0pO1xuICBtYXAuYWRkQ29udHJvbChtb3VzZVBvc2l0aW9uQ29udHJvbCk7XG59XG5cblxuLy8gRmVhdHVyZXMgYXVmIE1hdXNrbGljazogaHR0cHM6Ly9vcGVubGF5ZXJzLm9yZy9lbi9sYXRlc3QvZXhhbXBsZXMvZ2V0ZmVhdHVyZWluZm8tdGlsZS5odG1sXG5cbm1hcC5vbignc2luZ2xlY2xpY2snLCBmdW5jdGlvbiAoZXZ0KSB7ICAgICAgICAgICAgICAgICAgICAgIC8vIG1hcC5vbiAtIEFyYmVpdGVuIGF1ZiBkZXIgbWFwOyBvbiBpc3QgZGllIE1ldGhvZGUgLT4gendlaSBBcmd1bWVudGUgLSB2b3JkZWZpbmllcnRlcyBFdmVudCEgc2luZ2VjbGljay9kYmxjbGljay9jbGljazsgZnVua3Rpb24gbWl0IGVpbmVtIEV2ZW50IFxuICBjb25zb2xlLmxvZyhldnQuY29vcmRpbmF0ZSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29vcmRpbmF0ZW4gZGVzIEV2ZW50cyB3ZXJkZW4gYXVzZ2VnZWJlbiBcbiAgY29uc3QgaW5mb0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5mbycpXG4gIGlmKGluZm9FbGVtZW50KSB7ICAgICAgICAgICAgICAgXG4gICAgaW5mb0VsZW1lbnQuaW5uZXJIVE1MID0gJyc7XG4gICAgY29uc3Qgdmlld1Jlc29sdXRpb24gPSBldnQubWFwLmdldFZpZXcoKS5nZXRSZXNvbHV0aW9uKCkgPz8gMDsgICAgICAvLyBha3R1ZWxsZXIgS2FydGVuYXVzc2Nobml0dCB1bmQgYWt0dWVsbGUgQXVmbMO2c3VuZyB1bSBkZW4gZ2VjbGlja3RlbiBQdW5rdCBtw7ZnbGljaHN0IGdlbmF1IGFuIEdlb1NlcnZlciB6dXLDvGNrenVnZWJlblxuICAgIGNvbnN0IHNvdXJjZSA9IGxheWVyc1sxXT8uZ2V0U291cmNlKCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFF1ZWxsZSBkZXMgTGF5ZXJzIChhdWYgcG9zaXRpb24gMSBkZXMgQXJyYXlzKVxuICAgIGlmIChzb3VyY2UgaW5zdGFuY2VvZiBUaWxlV01TKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc29mZXJuIGRpZSBRdWVsbGUgVGlsZVdNUyBpc3QgLT4ga2FubiBnZXRGZWF0dXJlSW5mbyBhYmdlcnVmZW4gd2VyZGVuIFxuICAgICAgY29uc3QgdXJsID0gc291cmNlLmdldEZlYXR1cmVJbmZvVXJsKCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWl0IGRlciBFdmVudGtvb3JkaW5hdGUsIGRlciBha3R1ZWxsZW4gQXVmbMO2c3VuZy9LYXJ0ZW5hdXNzY2huaXR0LCBkZW0gQ1JTIHVuZCBkZW0gRm9ybWF0IGbDvHIgZGllIEF1c2dhYmUgXG4gICAgICAgIGV2dC5jb29yZGluYXRlLFxuICAgICAgICB2aWV3UmVzb2x1dGlvbixcbiAgICAgICAgJ0VQU0c6Mzg1NycsXG4gICAgICAgIHsgJ0lORk9fRk9STUFUJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbSBiZXN0ZW4gdW5kIGVpbmZhY2hzdGVuIHp1IGxlc2VuIFxuICAgICAgKTtcbiAgICAgIGNvbnNvbGUubG9nKHVybCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB1cmwgenUgZGVuIEZlYXR1cmVzIFxuICAgIGlmICh1cmwpIHtcbiAgICAgIGZldGNoKHVybCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXJsIGFicnVmZW4gdW5kIGRlbiBUZXh0IHp1csO8Y2tnZWJlbiBsYXNzZW4gYWxzbyBvYmplY3QgXG4gICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgICAudGhlbigocmVzcG9uc2VPYmplY3QpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZU9iamVjdCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPYmplY3QgYW56ZWlnZW4gbGFzc2VuIFxuICAgICAgICAgIFxuICAgICAgICAgIFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgfVxuICB9XG4gIHRhcmdldDogaW5mb0VsZW1lbnRcbn0pO1xuXG5cblxuXG5cblxuICBcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuLy8gSGlsZmUgZsO8ciBkaWUgTmFtZW4gZGVyIExheWVyIGltIEdlb3NlcnZlciwgbcO8c3NlbiBkYW5uIGluIGRlciBjb25maWcuanNvbi1EYXRlaSBhbmdlcGFzc3Qgd2VyZGVuIFxuXG4vLyBpbXBvcnQgV01TQ2FwYWJpbGl0aWVzIGZyb20gJ29sL2Zvcm1hdC9XTVNDYXBhYmlsaXRpZXMuanMnOyAgICAvLyBHcnVuZGxhZ2UgZsO8ciBkaXVlIFZlcndlbmR1bmcgdm9uIHNwZXppZWxsZW4gTWV0aG9kZW4gdm9uIFdNU0NhcGFiaWxpdGllc1xuXG4vLyBsZXQgcGFyc2VyID0gbmV3IFdNU0NhcGFiaWxpdGllcygpOyAgLy8gbmV1ZXMgV01TQ2FwYWJpbGl0aWVzIGVyc3RlbGxlbiBcblxuLy8gZmV0Y2goJ2h0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9nZW9zZXJ2ZXIvVW13ZWx0LUdlc3VuZGhlaXQvd21zP3NlcnZpY2U9V01TJnZlcnNpb249MS4zLjAmcmVxdWVzdD1HZXRDYXBhYmlsaXRpZXMnKSAvLyBVUkwgenVyIEdldENhcGFiaWxpdGllcyB2b20gR2VvU2VydmVyXG4vLyAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLnRleHQoKSkgICAvLyBBbnR3b3J0LCB3ZW5uIGRpZSB4bWwtRGF0ZWkgZ2VsYWRlbiB3dXJkZSwgbWl0IGRlbSBUZXh0IGRlciB4bWwtRGF0ZWlcbi8vICAgLnRoZW4ocmVzcG9uc2VUZXh0ID0+IHtcbi8vICAgICBsZXQgY2FwYWJpbGl0aWVzID0gcGFyc2VyLnJlYWQocmVzcG9uc2VUZXh0KTsgICAgICAvLyBtZXRob2RlIFdNU0NhcGFiaWxpdGllcyByZWFkIFxuLy8gICAgIGxldCBmaW5kTGF5ZXJzID0gY2FwYWJpbGl0aWVzLkNhcGFiaWxpdHkuTGF5ZXIuTGF5ZXI7ICAgIC8vIHN1Y2hlbiBpbSBUZXh0IG5hY2ggQ2FwYWJpbGl0aWVzLkxheWVyIFxuICAgIFxuLy8gICAgIGZvciAobGV0IGxheWVyIG9mIGZpbmRMYXllcnMpIHsgIC8vIGbDvHIgamVkZXMgU3VjaGVyZ2VibmlzIG5hY2ggTmFtZSAoY2hpbGQgb2YgTGF5ZXIgaW4gdGhlIHhtbC1maWxlKSB1bmQgRXJnZWJuaXMgcHVzaGVybiBpbiBsYXllciBOYW1lXG4vLyAgICAgICBsYXllck5hbWUucHVzaChsYXllci5OYW1lKTtcbi8vICAgICB9O1xuLy8gICAgIC8vIGNvbnNvbGUubG9nKGxheWVyTmFtZSk7ICAgLy8gTmFtZW4gZGVyIExheWVyIGluIGRlciBDb25zb2xlIGF1c2dlYmVuIGxhc3NlbiB1bmQgZW50c3ByZWNoZW5kIGluIGNvbmZpZy5qc29uIMO8YmVyYXJiZWl0ZW5cbi8vICAgfSlcbi8vICAgLmNhdGNoKGVycm9yID0+IHtcbi8vICAgICBjb25zb2xlLmxvZygnbXkgZXJyb3IgaXMgJywgZXJyb3IpICAgLy8gZmFsbHMgZGFzIG5pY2h0IGZ1bmt0aW9uaWVydCB3aXJkIGVpbiBGZWhsZXIgZ2VtZWxkZXQgXG4vLyAgIH0pXG5cbiAgLy8gRXJnZWJuaXMgQXJyYXk6IEF1c2dhYmU6IDI3LjAyLjI0XG4gICAgICAvLyBsZXQgTmFtZW46IHN0cmluZ1tdID0gW1xuICAgICAgLy8gICAgIFwiQWdyaWN1bHR1cmVfREVcIixcbiAgICAgIC8vICAgICBcIkV3RGljaHRlXCIsXG4gICAgICAvLyAgICAgXCJGb3Jlc3RfREVcIixcbiAgICAgIC8vICAgICBcIkdlbWVpbmRlZ3JlbnplblwiLFxuICAgICAgLy8gICAgIFwiSG9zcGl0YWxzXzJfZGFjaFwiLFxuICAgICAgLy8gICAgIFwiSG9zcGl0YWxzX0RFXCIsXG4gICAgICAvLyAgICAgXCJOYXRpb25hbGdyZW56ZV9ERVwiLFxuICAgICAgLy8gICAgIFwiT1NNLVdNU1wiLFxuICAgICAgLy8gICAgIFwiUl9OTzJfMjAxNFwiLFxuICAgICAgLy8gICAgIFwiUl9OTzJfMjAxNVwiLFxuICAgICAgLy8gICAgIFwiUl9OTzJfMjAxNlwiLFxuICAgICAgLy8gICAgIFwiUl9OTzJfMjAxN1wiLFxuICAgICAgLy8gICAgIFwiUl9OTzJfMjAxOFwiLFxuICAgICAgLy8gICAgIFwiUl9OTzJfMjAxOVwiLFxuICAgICAgLy8gICAgIFwiUl9OTzJfMjAyMFwiLFxuICAgICAgLy8gICAgIFwiUl9OTzJfMjAyMVwiLFxuICAgICAgLy8gICAgIFwiUl9OT3hfMjAxNFwiLFxuICAgICAgLy8gICAgIFwiUl9OT3hfMjAxNVwiLFxuICAgICAgLy8gICAgIFwiUl9OT3hfMjAxNlwiLFxuICAgICAgLy8gICAgIFwiUl9OT3hfMjAxN1wiLFxuICAgICAgLy8gICAgIFwiUl9OT3hfMjAxOFwiLFxuICAgICAgLy8gICAgIFwiUl9OT3hfMjAxOVwiLFxuICAgICAgLy8gICAgIFwiUl9OT3hfMjAyMFwiLFxuICAgICAgLy8gICAgIFwiUl9OT3hfMjAyMVwiLFxuICAgICAgLy8gICAgIFwiUl9QTTEwXzIwMDZcIixcbiAgICAgIC8vICAgICBcIlJfUE0xMF8yMDA3XCIsXG4gICAgICAvLyAgICAgXCJSX1BNMTBfMjAwOFwiLFxuICAgICAgLy8gICAgIFwiUl9QTTEwXzIwMDlcIixcbiAgICAgIC8vICAgICBcIlJfUE0xMF8yMDEwXCIsXG4gICAgICAvLyAgICAgXCJSX1BNMTBfMjAxMVwiLFxuICAgICAgLy8gICAgIFwiUl9QTTEwXzIwMTJcIixcbiAgICAgIC8vICAgICBcIlJfUE0xMF8yMDEzXCIsXG4gICAgICAvLyAgICAgXCJSX1BNMTBfMjAxNFwiLFxuICAgICAgLy8gICAgIFwiUl9QTTEwXzIwMTVcIixcbiAgICAgIC8vICAgICBcIlJfUE0xMF8yMDE2XCIsXG4gICAgICAvLyAgICAgXCJSX1BNMTBfMjAxN1wiLFxuICAgICAgLy8gICAgIFwiUl9QTTEwXzIwMThcIixcbiAgICAgIC8vICAgICBcIlJfUE0xMF8yMDE5XCIsXG4gICAgICAvLyAgICAgXCJSX1BNMTBfMjAyMFwiLFxuICAgICAgLy8gICAgIFwiUl9QTTEwXzIwMjFcIixcbiAgICAgIC8vICAgICBcIlJfUE0yNV8yMDA3XCIsXG4gICAgICAvLyAgICAgXCJSX1BNMjVfMjAwOFwiLFxuICAgICAgLy8gICAgIFwiUl9QTTI1XzIwMTBcIixcbiAgICAgIC8vICAgICBcIlJfUE0yNV8yMDExXCIsXG4gICAgICAvLyAgICAgXCJSX1BNMjVfMjAxMlwiLFxuICAgICAgLy8gICAgIFwiUl9QTTI1XzIwMTNcIixcbiAgICAgIC8vICAgICBcIlJfUE0yNV8yMDE0XCIsXG4gICAgICAvLyAgICAgXCJSX1BNMjVfMjAxNVwiLFxuICAgICAgLy8gICAgIFwiUl9QTTI1XzIwMTZcIixcbiAgICAgIC8vICAgICBcIlJfUE0yNV8yMDE3XCIsXG4gICAgICAvLyAgICAgXCJSX1BNMjVfMjAxOFwiLFxuICAgICAgLy8gICAgIFwiUl9QTTI1XzIwMTlcIixcbiAgICAgIC8vICAgICBcIlJfUE0yNV8yMDIwXCIsXG4gICAgICAvLyAgICAgXCJSX1BNMjVfMjAyMVwiLFxuICAgICAgLy8gICAgIFwiVHJhdmVsVGltZVwiLFxuICAgICAgLy8gICAgIFwiVl9DT18yMDIxXCIsXG4gICAgICAvLyAgICAgXCJWX05PMl8yMDIxXCIsXG4gICAgICAvLyAgICAgXCJWX08zXzIwMjFcIixcbiAgICAgIC8vICAgICBcIlZfUE0xMF8yMDIxXCIsXG4gICAgICAvLyAgICAgXCJWX1BNMi41XzIwMjFcIixcbiAgICAgIC8vICAgICBcIlZfU08yXzIwMjFcIixcbiAgICAgIC8vICAgICBcIldhdGVyX2JvZGllc19ERVwiLFxuICAgICAgLy8gICAgIFwiV2V0bGFuZHNfREVcIlxuICAgICAgLy8gICBdIFxuICBcblxuXG5cblxuXG4vLyBsZXQgbGF5ZXJOYW1lOiBzdHJpbmdbXSA9IFtdOyAvLyBzb2xsIGVpbiBzdHJpbmcgc2VpbiAtLT4gTmFtZW4gZGVyIExheWVyIGZlaGxlbiBcbi8vIGxldCByZXN1bHRMYXllcnMgPSBbXTtcblxuLy8gZm9yIChsZXQgbmFtZSBvZiBsYXllck5hbWUpe1xuLy8gICBsZXQgbmV3TGF5ZXIgPSBuZXcgVGlsZUxheWVyKHtcbi8vICAgICBzb3VyY2U6IG5ldyBUaWxlV01TKHtcbi8vICAgICAgIHVybDogJ2h0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9nZW9zZXJ2ZXIvVW13ZWx0LUdlc3VuZGhlaXQvd21zJywgIFxuLy8gICAgICAgcGFyYW1zOiB7J0xBWUVSUyc6IG5hbWUsICdUSUxFRCc6IHRydWV9LFxuLy8gICAgICAgc2VydmVyVHlwZTogJ2dlb3NlcnZlcicsXG4vLyAgICAgICB0cmFuc2l0aW9uOiAwLFxuLy8gICAgIH0pLFxuLy8gICB9KVxuLy8gICByZXN1bHRMYXllcnMucHVzaChuZXdMYXllcilcbi8vIH1cbiJdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxTQUFTO0FBQ2hCLE9BQU8sU0FBUztBQUNoQixPQUFPLGVBQWU7QUFDdEIsT0FBTyxhQUFhO0FBQ3BCLE9BQU8sVUFBVTtBQUdqQixPQUFPLG1CQUFtQjtBQUMxQixTQUFRLHNCQUFxQjtBQTRDN0IsTUFBTSxTQUFVO0FBQUEsRUFDZCxJQUFJLFVBQVU7QUFBQSxJQUNaLFFBQVEsSUFBSSxJQUFJO0FBQUEsRUFDbEIsQ0FBQztBQUFBLEVBRUQsSUFBSSxVQUFVO0FBQUEsSUFFWixRQUFRLElBQUksUUFBUTtBQUFBLE1BQ2xCLEtBQUs7QUFBQSxNQUVMLFFBQVEsRUFBQyxVQUFVLGVBQWUsU0FBUyxLQUFJO0FBQUEsTUFDL0MsWUFBWTtBQUFBLE1BRVosWUFBWTtBQUFBLElBQ2QsQ0FBQztBQUFBLEVBQ0gsQ0FBQztBQUFBLEVBRUQsSUFBSSxVQUFVO0FBQUEsSUFFWixRQUFRLElBQUksUUFBUTtBQUFBLE1BQ2xCLEtBQUs7QUFBQSxNQUVMLFFBQVEsRUFBQyxVQUFVLGFBQWEsU0FBUyxLQUFJO0FBQUEsTUFDN0MsWUFBWTtBQUFBLE1BRVosWUFBWTtBQUFBLElBQ2QsQ0FBQztBQUFBLEVBQ0gsQ0FBQztBQUNIO0FBS0EsTUFBTSxNQUFNLElBQUksSUFBSTtBQUFBLEVBQ2xCO0FBQUEsRUFDQSxRQUFRO0FBQUEsRUFDUixNQUFNLElBQUksS0FBSztBQUFBLElBQ2IsUUFBUSxDQUFDLFNBQVMsT0FBTztBQUFBLElBQ3pCLE1BQU07QUFBQSxFQUNSLENBQUM7QUFDSCxDQUFDO0FBR0QsTUFBTSxnQkFBZ0IsU0FBUyxlQUFlLGdCQUFnQjtBQUM5RCxJQUFJLGtCQUFrQixNQUFNO0FBQzFCLFFBQU0sdUJBQXVCLElBQUksY0FBYztBQUFBLElBQzdDLGtCQUFrQixlQUFlLENBQUM7QUFBQSxJQUNsQyxZQUFZO0FBQUEsSUFDWixRQUFRO0FBQUEsRUFDVixDQUFDO0FBQ0QsTUFBSSxXQUFXLG9CQUFvQjtBQUNyQztBQUtBLElBQUksR0FBRyxlQUFlLFNBQVUsS0FBSztBQUNuQyxVQUFRLElBQUksSUFBSSxVQUFVO0FBQzFCLFFBQU0sY0FBYyxTQUFTLGVBQWUsTUFBTTtBQUNsRCxNQUFHLGFBQWE7QUFDZCxnQkFBWSxZQUFZO0FBQ3hCLFVBQU0saUJBQWlCLElBQUksSUFBSSxRQUFRLEVBQUUsY0FBYyxLQUFLO0FBQzVELFVBQU0sU0FBUyxPQUFPLElBQUksVUFBVTtBQUNwQyxRQUFJLGtCQUFrQixTQUFTO0FBQzdCLFlBQU0sTUFBTSxPQUFPO0FBQUEsUUFDakIsSUFBSTtBQUFBLFFBQ0o7QUFBQSxRQUNBO0FBQUEsUUFDQSxFQUFFLGVBQWUsbUJBQW1CO0FBQUEsTUFDdEM7QUFDQSxjQUFRLElBQUksR0FBRztBQUNqQixVQUFJLEtBQUs7QUFDUCxjQUFNLEdBQUcsRUFDTixLQUFLLENBQUMsYUFBYSxTQUFTLEtBQUssQ0FBQyxFQUNsQyxLQUFLLENBQUMsbUJBQW1CO0FBQ3hCLGtCQUFRLElBQUksY0FBYztBQUFBLFFBRzVCLENBQUM7QUFBQSxNQUNMO0FBQUEsSUFDQTtBQUFBLEVBQ0Y7QUFDQTtBQUFRO0FBQ1YsQ0FBQzsiLCJuYW1lcyI6W119